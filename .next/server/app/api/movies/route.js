"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/movies/route";
exports.ids = ["app/api/movies/route"];
exports.modules = {

/***/ "jsdom":
/*!************************!*\
  !*** external "jsdom" ***!
  \************************/
/***/ ((module) => {

module.exports = require("jsdom");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmovies%2Froute&page=%2Fapi%2Fmovies%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmovies%2Froute.js&appDir=%2FUsers%2Fguzmancura%2FDesktop%2Fnextflix%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fguzmancura%2FDesktop%2Fnextflix&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmovies%2Froute&page=%2Fapi%2Fmovies%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmovies%2Froute.js&appDir=%2FUsers%2Fguzmancura%2FDesktop%2Fnextflix%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fguzmancura%2FDesktop%2Fnextflix&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_guzmancura_Desktop_nextflix_src_app_api_movies_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/movies/route.js */ \"(rsc)/./src/app/api/movies/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/movies/route\",\n        pathname: \"/api/movies\",\n        filename: \"route\",\n        bundlePath: \"app/api/movies/route\"\n    },\n    resolvedPagePath: \"/Users/guzmancura/Desktop/nextflix/src/app/api/movies/route.js\",\n    nextConfigOutput,\n    userland: _Users_guzmancura_Desktop_nextflix_src_app_api_movies_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/movies/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZtb3ZpZXMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm1vdmllcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm1vdmllcyUyRnJvdXRlLmpzJmFwcERpcj0lMkZVc2VycyUyRmd1em1hbmN1cmElMkZEZXNrdG9wJTJGbmV4dGZsaXglMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGZ3V6bWFuY3VyYSUyRkRlc2t0b3AlMkZuZXh0ZmxpeCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNjO0FBQzNGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGZsaXgvP2VlNWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2d1em1hbmN1cmEvRGVza3RvcC9uZXh0ZmxpeC9zcmMvYXBwL2FwaS9tb3ZpZXMvcm91dGUuanNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL21vdmllcy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL21vdmllc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvbW92aWVzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2d1em1hbmN1cmEvRGVza3RvcC9uZXh0ZmxpeC9zcmMvYXBwL2FwaS9tb3ZpZXMvcm91dGUuanNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvbW92aWVzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmovies%2Froute&page=%2Fapi%2Fmovies%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmovies%2Froute.js&appDir=%2FUsers%2Fguzmancura%2FDesktop%2Fnextflix%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fguzmancura%2FDesktop%2Fnextflix&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/movies/route.js":
/*!*************************************!*\
  !*** ./src/app/api/movies/route.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var jsdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsdom */ \"jsdom\");\n/* harmony import */ var jsdom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsdom__WEBPACK_IMPORTED_MODULE_1__);\n\n\nasync function fetchAllPages(listUrl) {\n    const allMovies = [];\n    let currentPage = 1;\n    let hasNextPage = true;\n    let retryCount = 0;\n    const maxRetries = 2;\n    const delayBetweenPages = 2000;\n    const delayBetweenRetries = 3000;\n    // Check if it's a watchlist URL\n    const isWatchlist = listUrl.includes(\"/watchlist\");\n    while(hasNextPage){\n        // Handle pagination URL format differently for watchlists\n        const pageUrl = currentPage === 1 ? listUrl : isWatchlist ? `${listUrl.replace(/\\/$/, \"\")}/page/${currentPage}/` : `${listUrl}page/${currentPage}/`;\n        console.log(\"Fetching page:\", pageUrl);\n        try {\n            if (currentPage > 1) {\n                console.log(`Waiting ${delayBetweenPages}ms before fetching next page...`);\n                await new Promise((resolve)=>setTimeout(resolve, delayBetweenPages));\n            }\n            const response = await fetch(pageUrl, {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n                    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                    \"Accept-Language\": \"en-US,en;q=0.5\",\n                    \"Connection\": \"keep-alive\",\n                    \"Upgrade-Insecure-Requests\": \"1\",\n                    \"Cache-Control\": \"max-age=0\"\n                }\n            });\n            if (!response.ok) {\n                console.error(\"Failed to fetch page:\", pageUrl, response.status);\n                if (retryCount < maxRetries) {\n                    retryCount++;\n                    console.log(`Retrying page ${currentPage} (attempt ${retryCount}/${maxRetries})`);\n                    await new Promise((resolve)=>setTimeout(resolve, delayBetweenRetries));\n                    continue;\n                }\n                console.log(\"Max retries reached, continuing with available movies\");\n                break;\n            }\n            retryCount = 0;\n            const html = await response.text();\n            const dom = new jsdom__WEBPACK_IMPORTED_MODULE_1__.JSDOM(html);\n            const doc = dom.window.document;\n            // Try different selectors for movie elements\n            const movieElements = doc.querySelectorAll(\".poster-container, .film-poster\");\n            console.log(`Found ${movieElements.length} movies on page ${currentPage}`);\n            if (movieElements.length === 0) {\n                console.log(\"No movies found on page, breaking loop\");\n                break;\n            }\n            // Check if there's a next page by looking at the pagination\n            const pagination = doc.querySelector(\".paginate-pages, .pagination\");\n            console.log(\"Pagination element found:\", !!pagination);\n            if (pagination) {\n                const lastPageLink = pagination.querySelector(\"li:last-child a, .paginate-last a\");\n                const totalPages = lastPageLink ? parseInt(lastPageLink.textContent) : 1;\n                console.log(`Total pages found: ${totalPages}`);\n                hasNextPage = currentPage < totalPages;\n            } else {\n                // If no pagination found, check for next button\n                const nextButton = doc.querySelector(\".paginate-next, .next\");\n                console.log(\"Next button found:\", !!nextButton);\n                hasNextPage = !!nextButton;\n            }\n            // Add all movies from this page\n            allMovies.push(...Array.from(movieElements));\n            console.log(`Total movies collected so far: ${allMovies.length}`);\n            if (hasNextPage) {\n                console.log(`Moving to page ${currentPage + 1}`);\n                currentPage++;\n            }\n        } catch (error) {\n            console.error(\"Error fetching page:\", error);\n            if (retryCount < maxRetries) {\n                retryCount++;\n                console.log(`Retrying page ${currentPage} (attempt ${retryCount}/${maxRetries})`);\n                await new Promise((resolve)=>setTimeout(resolve, delayBetweenRetries));\n                continue;\n            }\n            console.log(\"Max retries reached, continuing with available movies\");\n            break;\n        }\n    }\n    console.log(`Finished fetching all pages. Total movies found: ${allMovies.length}`);\n    return allMovies;\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const listUrl = searchParams.get(\"url\");\n        if (!listUrl) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Please provide a Letterboxd list URL\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"Fetching list:\", listUrl);\n        const movieElements = await fetchAllPages(listUrl);\n        console.log(\"Total movie elements found across all pages:\", movieElements.length);\n        if (movieElements.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No movies found in the list. Please make sure the list is public and accessible.\"\n            }, {\n                status: 404\n            });\n        }\n        const movies = await Promise.all(movieElements.map(async (element, index)=>{\n            const movieLink = element.querySelector(\"div[data-target-link]\");\n            const movieSlug = movieLink?.getAttribute(\"data-target-link\")?.split(\"/\")[2] || \"\";\n            if (!movieSlug) {\n                console.log(\"No movie slug found for element:\", element.outerHTML);\n                return null;\n            }\n            console.log(\"Processing movie with slug:\", movieSlug);\n            try {\n                const movieUrl = `https://letterboxd.com/film/${movieSlug}/`;\n                console.log(\"Fetching movie:\", movieUrl);\n                const movieResponse = await fetch(movieUrl, {\n                    headers: {\n                        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n                        \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                        \"Accept-Language\": \"en-US,en;q=0.5\",\n                        \"Connection\": \"keep-alive\",\n                        \"Upgrade-Insecure-Requests\": \"1\",\n                        \"Cache-Control\": \"max-age=0\"\n                    }\n                });\n                if (!movieResponse.ok) {\n                    console.error(\"Failed to fetch movie:\", movieUrl, movieResponse.status);\n                    return null;\n                }\n                const movieHtml = await movieResponse.text();\n                const movieDom = new jsdom__WEBPACK_IMPORTED_MODULE_1__.JSDOM(movieHtml);\n                const movieDoc = movieDom.window.document;\n                const titleElement = movieDoc.querySelector(\"h1.headline-1\");\n                const title1 = titleElement?.textContent?.trim() || movieSlug.replace(/-/g, \" \");\n                const tmdbLink = movieDoc.querySelector('a[href*=\"themoviedb.org\"]');\n                const tmdbId = tmdbLink?.href?.match(/movie\\/(\\d+)/)?.[1];\n                console.log(\"Movie processing:\", {\n                    title: title1,\n                    tmdbId,\n                    hasTmdbLink: !!tmdbLink,\n                    tmdbLinkHref: tmdbLink?.href\n                });\n                const letterboxdApiUrl = `https://letterboxd.com/film/${movieSlug}/`;\n                console.log(\"Fetching reviews from:\", letterboxdApiUrl);\n                let reviews = [];\n                try {\n                    const reviewsResponse = await fetch(letterboxdApiUrl, {\n                        headers: {\n                            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n                            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                            \"Accept-Language\": \"en-US,en;q=0.5\",\n                            \"Connection\": \"keep-alive\",\n                            \"Upgrade-Insecure-Requests\": \"1\",\n                            \"Cache-Control\": \"max-age=0\"\n                        }\n                    });\n                    console.log(\"Reviews response status:\", reviewsResponse.status);\n                    console.log(\"Reviews response ok:\", reviewsResponse.ok);\n                    if (reviewsResponse.ok) {\n                        const reviewsHtml = await reviewsResponse.text();\n                        const reviewsDom = new jsdom__WEBPACK_IMPORTED_MODULE_1__.JSDOM(reviewsHtml);\n                        const reviewsDoc = reviewsDom.window.document;\n                        // Find the Popular Reviews section and get its AJAX URL\n                        const popularReviewsSection = reviewsDoc.querySelector(\".js-popular-reviews\");\n                        console.log(\"Popular reviews section found:\", !!popularReviewsSection);\n                        if (popularReviewsSection) {\n                            const reviewsUrl = popularReviewsSection.getAttribute(\"data-url\");\n                            console.log(\"Found reviews URL:\", reviewsUrl);\n                            if (reviewsUrl) {\n                                // Fetch the reviews from the AJAX endpoint\n                                const ajaxReviewsResponse = await fetch(`https://letterboxd.com${reviewsUrl}`, {\n                                    headers: {\n                                        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n                                        \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                                        \"Accept-Language\": \"en-US,en;q=0.5\",\n                                        \"Connection\": \"keep-alive\",\n                                        \"X-Requested-With\": \"XMLHttpRequest\"\n                                    }\n                                });\n                                if (ajaxReviewsResponse.ok) {\n                                    const ajaxReviewsHtml = await ajaxReviewsResponse.text();\n                                    const ajaxReviewsDom = new jsdom__WEBPACK_IMPORTED_MODULE_1__.JSDOM(ajaxReviewsHtml);\n                                    const ajaxReviewsDoc = ajaxReviewsDom.window.document;\n                                    const reviewContainers = ajaxReviewsDoc.querySelectorAll(\".js-listitem\");\n                                    console.log(\"Found review containers:\", reviewContainers.length);\n                                    if (reviewContainers.length > 0) {\n                                        reviews = Array.from(reviewContainers).map((container)=>{\n                                            const reviewText = container.querySelector(\".js-review-body\")?.textContent?.trim() || \"\";\n                                            const reviewerName = container.querySelector(\".displayname\")?.textContent?.trim() || \"Anonymous\";\n                                            const ratingElement = container.querySelector(\".rating\");\n                                            const rating = ratingElement ? ratingElement.textContent.includes(\"★\") ? ratingElement.textContent.split(\"★\").length - 1 : 0 : 0;\n                                            const dateElement = container.querySelector(\"time\");\n                                            const date = dateElement?.getAttribute(\"datetime\") || new Date().toISOString();\n                                            const avatarElement = container.querySelector(\".avatar img\");\n                                            const avatarUrl = avatarElement?.src || null;\n                                            console.log(\"Processing review:\", {\n                                                reviewer: reviewerName,\n                                                hasContent: !!reviewText,\n                                                contentLength: reviewText.length,\n                                                rating,\n                                                date,\n                                                hasAvatar: !!avatarUrl\n                                            });\n                                            return {\n                                                id: container?.querySelector(\".js-production-viewing\")?.getAttribute(\"data-viewing-id\") || Math.random().toString(36).substr(2, 9),\n                                                reviewer: reviewerName,\n                                                rating,\n                                                date,\n                                                content: reviewText,\n                                                profilePath: avatarUrl\n                                            };\n                                        }).filter((review)=>review.content.length > 0);\n                                        reviews.sort((a, b)=>new Date(b.date) - new Date(a.date));\n                                        reviews = reviews.slice(0, 6);\n                                        console.log(\"Final processed reviews:\", reviews.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"Error fetching reviews:\", error);\n                }\n                let movieData = {\n                    id: index + 1,\n                    title: title1.charAt(0).toUpperCase() + title1.slice(1),\n                    year: null,\n                    director: \"Unknown Director\",\n                    directorProfilePath: null,\n                    posterUrl: \"https://s.ltrbxd.com/static/img/empty-poster-1000-D9cprv0m.png\",\n                    description: \"No description available\",\n                    rating: null,\n                    genres: [],\n                    cast: [],\n                    backdropUrl: null,\n                    runtime: null,\n                    releaseDate: null,\n                    tmdbId: null,\n                    movieSlug,\n                    reviews: reviews || []\n                };\n                if (tmdbId) {\n                    console.log(\"Fetching data for movie with TMDB ID:\", tmdbId);\n                    const tmdbUrl = `https://api.themoviedb.org/3/movie/${tmdbId}?api_key=2dca580c2a14b55200e784d157207b4d&append_to_response=credits`;\n                    console.log(\"Fetching movie details from:\", tmdbUrl);\n                    const tmdbResponse = await fetch(tmdbUrl, {\n                        headers: {\n                            \"Accept\": \"application/json\"\n                        }\n                    });\n                    if (tmdbResponse.ok) {\n                        const tmdbData = await tmdbResponse.json();\n                        console.log(\"TMDB movie data received:\", {\n                            title: tmdbData.title,\n                            hasCredits: !!tmdbData.credits,\n                            responseKeys: Object.keys(tmdbData)\n                        });\n                        const year = tmdbData.release_date?.split(\"-\")[0] || \"\";\n                        const directorData = tmdbData.credits?.crew?.find((person)=>person.job === \"Director\");\n                        const director = directorData?.name || \"Unknown Director\";\n                        const directorProfilePath = directorData?.profile_path ? `https://image.tmdb.org/t/p/w185${directorData.profile_path}` : null;\n                        const cast = tmdbData.credits?.cast?.map((actor)=>({\n                                name: actor.name,\n                                character: actor.character,\n                                profilePath: actor.profile_path ? `https://image.tmdb.org/t/p/w185${actor.profile_path}` : null,\n                                order: actor.order\n                            })).sort((a, b)=>a.order - b.order) || [];\n                        let description = \"No description available\";\n                        if (tmdbData.overview) {\n                            description = tmdbData.overview;\n                        } else {\n                            const letterboxdDescription = movieDoc.querySelector(\".text-sluglist + p, .text-sluglist + div p\");\n                            if (letterboxdDescription) {\n                                description = letterboxdDescription.textContent.trim();\n                            }\n                        }\n                        const rating = tmdbData.vote_average ? Math.round(tmdbData.vote_average * 10) / 10 : null;\n                        const genres = tmdbData.genres?.map((genre)=>genre.name) || [];\n                        const posterUrl = tmdbData.poster_path ? `https://image.tmdb.org/t/p/w500${tmdbData.poster_path}` : \"https://s.ltrbxd.com/static/img/empty-poster-1000-D9cprv0m.png\";\n                        const backdropUrl = tmdbData.backdrop_path ? `https://image.tmdb.org/t/p/original${tmdbData.backdrop_path}` : null;\n                        movieData = {\n                            ...movieData,\n                            year: parseInt(year) || null,\n                            director,\n                            directorProfilePath,\n                            posterUrl,\n                            description,\n                            rating,\n                            genres,\n                            cast,\n                            backdropUrl,\n                            runtime: tmdbData.runtime,\n                            releaseDate: tmdbData.release_date,\n                            tmdbId\n                        };\n                    }\n                }\n                console.log(\"Final movie data:\", movieData);\n                return movieData;\n            } catch (error) {\n                console.error(\"Error processing movie:\", movieSlug, error);\n                return {\n                    id: index + 1,\n                    title: title.charAt(0).toUpperCase() + title.slice(1),\n                    year: null,\n                    director: \"Unknown Director\",\n                    directorProfilePath: null,\n                    posterUrl: \"https://s.ltrbxd.com/static/img/empty-poster-1000-D9cprv0m.png\",\n                    description: \"No description available\",\n                    rating: null,\n                    genres: [],\n                    cast: [],\n                    backdropUrl: null,\n                    runtime: null,\n                    releaseDate: null,\n                    tmdbId: null,\n                    movieSlug,\n                    reviews: []\n                };\n            }\n        }));\n        const validMovies = movies.filter((movie)=>movie !== null);\n        const uniqueMovies = Array.from(new Map(validMovies.map((movie)=>[\n                movie.title,\n                movie\n            ])).values());\n        console.log(\"Final movies array:\", uniqueMovies.map((m)=>({\n                title: m.title,\n                slug: m.movieSlug\n            })));\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(uniqueMovies);\n    } catch (error) {\n        console.error(\"Error in API route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"An unexpected error occurred\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/movies/route.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmovies%2Froute&page=%2Fapi%2Fmovies%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmovies%2Froute.js&appDir=%2FUsers%2Fguzmancura%2FDesktop%2Fnextflix%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fguzmancura%2FDesktop%2Fnextflix&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();